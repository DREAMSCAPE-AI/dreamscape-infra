# DreamScape Core Pod NGINX Configuration
# DR-336: INFRA-010.3 - Reverse Proxy for Big Pod Architecture
# Routes requests to auth-service (3001) and user-service (3002) running on localhost

# user nginx;  # Commenté car problème permissions dans container
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format with upstream timing
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'upstream_addr=$upstream_addr upstream_response_time=$upstream_response_time';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # Rate limiting for Big Pod
    limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=users:10m rate=15r/s;

    # Upstream definitions for localhost services (Big Pod architecture)
    upstream auth_service_local {
        server 127.0.0.1:3001;
        keepalive 8;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream user_service_local {
        server 127.0.0.1:3002;
        keepalive 8;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Main server configuration
    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Powered-By "DreamScape-Core-Pod" always;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "Core Pod NGINX - OK\n";
            add_header Content-Type text/plain;
        }

        # Core Pod status endpoint
        location /status {
            access_log off;
            return 200 '{"status":"healthy","pod":"core","services":["nginx","auth","user"],"timestamp":"$time_iso8601"}\n';
            add_header Content-Type application/json;
        }

        # Auth service routes (localhost:3001)
        location /api/v1/auth {
            limit_req zone=auth burst=15 nodelay;
            
            # Proxy headers
            proxy_pass http://auth_service_local;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Service-Route "auth";
            
            # Timeouts optimized for localhost
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Error handling
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # User service routes (localhost:3002)
        location /api/v1/users {
            limit_req zone=users burst=20 nodelay;
            
            # Proxy headers
            proxy_pass http://user_service_local;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Service-Route "user";
            
            # Timeouts optimized for localhost
            proxy_connect_timeout 5s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
            
            # Buffer settings for uploads
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 16 8k;
            proxy_max_temp_file_size 1024m;
            
            # Error handling
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # File upload handling for user service
        location /api/v1/users/upload {
            limit_req zone=users burst=5 nodelay;
            client_max_body_size 50M;
            
            proxy_pass http://user_service_local;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Service-Route "user-upload";
            
            # Extended timeouts for uploads
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Disable buffering for large uploads
            proxy_buffering off;
            proxy_request_buffering off;
        }

        # Auth service health endpoint (direct)
        location /api/v1/auth/health {
            access_log off;
            proxy_pass http://auth_service_local/health;
            proxy_connect_timeout 2s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
        }

        # User service health endpoint (direct)
        location /api/v1/users/health {
            access_log off;
            proxy_pass http://user_service_local/health;
            proxy_connect_timeout 2s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
        }

        # API fallback routes
        location /api {
            limit_req zone=api burst=25 nodelay;
            return 503 '{"error":"Service not available","available_services":["/api/v1/auth","/api/v1/users"]}\n';
            add_header Content-Type application/json;
        }

        # Default fallback
        location / {
            return 200 '{"message":"DreamScape Core Pod","version":"1.0.0","services":["nginx","auth-service","user-service"],"endpoints":["/api/v1/auth","/api/v1/users","/health","/status"]}\n';
            add_header Content-Type application/json;
        }

        # Metrics endpoint for Prometheus
        location /metrics {
            access_log off;
            stub_status on;
        }
    }

    # Admin server for internal monitoring (port 8080)
    server {
        listen 8080;
        server_name _;
        
        # Restrict to localhost only
        allow 127.0.0.1;
        deny all;

        location /nginx_status {
            stub_status on;
            access_log off;
        }

        location /supervisor {
            proxy_pass http://127.0.0.1:9001;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            return 200 '{"admin":"Core Pod Admin","nginx_status":"/nginx_status","supervisor":"/supervisor"}\n';
            add_header Content-Type application/json;
        }
    }
}