---
name: CD Pipeline - Deploy to Oracle Cloud

on:
  push:
    branches: [main]
  repository_dispatch:
    types: [deploy-images]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment à déployer'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production
      services:
        description: 'Services à déployer (frontend,backend ou all)'
        required: false
        default: 'all'
        type: string
      image_tag:
        description: 'Tag des images Docker à déployer'
        required: false
        type: string
      skip_tests:
        description: 'Skip les tests pré/post déploiement'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force le déploiement même si des services sont down'
        required: false
        default: false
        type: boolean

env:
  DOCKER_IMAGE_FRONT: dreamscape/frontend
  DOCKER_IMAGE_BACK: dreamscape/backend

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      services: ${{ steps.set-services.outputs.services }}
      deploy_frontend: ${{ steps.set-services.outputs.deploy_frontend }}
      deploy_backend: ${{ steps.set-services.outputs.deploy_backend }}
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
      vm_host: ${{ steps.set-env.outputs.vm_host }}
      ssh_key: ${{ steps.set-env.outputs.ssh_key }}
    steps:
      - name: Set environment, VM host and SSH key
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            environment="staging"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            environment="staging"
          else
            environment="${{ github.event.inputs.environment }}"
          fi

          echo "environment=$environment" >> $GITHUB_OUTPUT

          case $environment in
            "production")
              echo "vm_host=${{ secrets.VM_HOST_PRODUCTION }}" >> $GITHUB_OUTPUT
              echo "ssh_key=SSH_PRIVATE_KEY_PRODUCTION" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "vm_host=${{ secrets.VM_HOST_STAGING }}" >> $GITHUB_OUTPUT
              echo "ssh_key=SSH_PRIVATE_KEY_STAGING" >> $GITHUB_OUTPUT
              ;;
            "dev"|*)
              echo "vm_host=${{ secrets.VM_HOST_DEV }}" >> $GITHUB_OUTPUT
              echo "ssh_key=SSH_PRIVATE_KEY_DEV" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Set services to deploy
        id: set-services
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            services="${{ github.event.client_payload.services }}"
          else
            services="${{ github.event.inputs.services }}"
          fi

          if [[ "$services" == "" || "$services" == "all" ]]; then
            services="frontend,backend"
          fi

          echo "services=$services" >> $GITHUB_OUTPUT

          if [[ "$services" == *"frontend"* ]]; then
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_frontend=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$services" == *"backend"* ]]; then
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_backend=false" >> $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: set-tag
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            image_tag="${{ github.event.client_payload.commit_sha }}${{ github.event.client_payload.tag_suffix }}"
          elif [[ "${{ github.event.inputs.image_tag }}" != "" ]]; then
            image_tag="${{ github.event.inputs.image_tag }}"
          else
            image_tag="latest"
          fi

          echo "image_tag=$image_tag" >> $GITHUB_OUTPUT

  pre-deployment-tests:
    needs: [prepare]
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          repository: DREAMSCAPE-AI/dreamscape-tests
          token: ${{ secrets.CI_CLONE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run pre-deployment tests
        run: |
          echo "Running pre-deployment validation tests"
          echo "Environment: ${{ needs.prepare.outputs.environment }}"
          echo "Services: ${{ needs.prepare.outputs.services }}"
          echo "Image tag: ${{ needs.prepare.outputs.image_tag }}"
          npm run test:pre-deploy || echo "Pre-deployment tests not configured yet"
        env:
          TARGET_ENV: ${{ needs.prepare.outputs.environment }}
          IMAGE_TAG: ${{ needs.prepare.outputs.image_tag }}

  deploy:
    needs: [prepare, pre-deployment-tests]
    if: always() && (needs.pre-deployment-tests.result == 'success' || needs.pre-deployment-tests.result == 'skipped')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: frontend
            condition: ${{ needs.prepare.outputs.deploy_frontend == 'true' }}
          - service: backend
            condition: ${{ needs.prepare.outputs.deploy_backend == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH for VM access
        if: matrix.condition
        run: |
          mkdir -p ~/.ssh
          case "${{ needs.prepare.outputs.ssh_key }}" in
            "SSH_PRIVATE_KEY_PRODUCTION")
              echo "${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_STAGING")
              echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_DEV"|*)
              echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" > ~/.ssh/id_rsa
              ;;
          esac
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.prepare.outputs.vm_host }} >> ~/.ssh/known_hosts

      - name: Make scripts executable
        if: matrix.condition
        run: |
          chmod +x scripts/*.sh

      - name: Pre-deployment health check
        if: matrix.condition
        run: |
          echo "Checking current ${{ matrix.service }} health before deployment"
          ./scripts/healthcheck.sh ${{ matrix.service }} ${{ needs.prepare.outputs.environment }} ${{ needs.prepare.outputs.vm_host }} || echo "Service not currently running"

      - name: Deploy ${{ matrix.service }} to Oracle Cloud VM
        if: matrix.condition
        run: |
          SERVICE="${{ matrix.service }}"
          ENV="${{ needs.prepare.outputs.environment }}"
          IMAGE_TAG="${{ needs.prepare.outputs.image_tag }}"
          VM_HOST="${{ needs.prepare.outputs.vm_host }}"

          echo "Deploying $SERVICE:$IMAGE_TAG to $ENV environment"
          echo "Target Oracle VM: $VM_HOST"

          case $SERVICE in
            "frontend")
              ./scripts/deploy-frontend.sh $ENV $IMAGE_TAG $VM_HOST
              ;;
            "backend")
              ./scripts/deploy-backend.sh $ENV $IMAGE_TAG $VM_HOST
              ;;
            *)
              echo "Unknown service: $SERVICE"
              exit 1
              ;;
          esac

      - name: Post-deployment service health check
        if: matrix.condition
        run: |
          echo "Verifying ${{ matrix.service }} deployment health"
          sleep 15
          ./scripts/healthcheck.sh ${{ matrix.service }} ${{ needs.prepare.outputs.environment }} ${{ needs.prepare.outputs.vm_host }}

  post-deployment-tests:
    needs: [prepare, deploy]
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          repository: DREAMSCAPE-AI/dreamscape-tests
          token: ${{ secrets.CI_CLONE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be fully deployed..."
          sleep 30

      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment tests"
          npm run test:post-deploy || echo "Post-deployment tests not configured yet"
        env:
          TARGET_ENV: ${{ needs.prepare.outputs.environment }}
          VM_HOST: ${{ needs.prepare.outputs.vm_host }}
          IMAGE_TAG: ${{ needs.prepare.outputs.image_tag }}

  rollback:
    if: failure() && (needs.deploy.result == 'failure' || needs.post-deployment-tests.result == 'failure')
    needs: [prepare, deploy, post-deployment-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH for rollback
        run: |
          mkdir -p ~/.ssh
          case "${{ needs.prepare.outputs.ssh_key }}" in
            "SSH_PRIVATE_KEY_PRODUCTION")
              echo "${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_STAGING")
              echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_DEV"|*)
              echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" > ~/.ssh/id_rsa
              ;;
          esac
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.prepare.outputs.vm_host }} >> ~/.ssh/known_hosts

      - name: Make scripts executable
        run: |
          chmod +x scripts/*.sh

      - name: Rollback deployment
        run: |
          echo "Rolling back deployment"
          echo "Environment: ${{ needs.prepare.outputs.environment }}"
          echo "Services: ${{ needs.prepare.outputs.services }}"
          ./scripts/rollback.sh ${{ needs.prepare.outputs.environment }} ${{ needs.prepare.outputs.services }} ${{ needs.prepare.outputs.vm_host }}

      - name: Verify rollback
        run: |
          echo "Verifying rollback success"
          sleep 30
          if [[ "${{ needs.prepare.outputs.services }}" == *"frontend"* ]]; then
            ./scripts/healthcheck.sh frontend ${{ needs.prepare.outputs.environment }} ${{ needs.prepare.outputs.vm_host }}
          fi
          if [[ "${{ needs.prepare.outputs.services }}" == *"backend"* ]]; then
            ./scripts/healthcheck.sh backend ${{ needs.prepare.outputs.environment }} ${{ needs.prepare.outputs.vm_host }}
          fi

  cleanup:
    needs: [prepare, deploy, post-deployment-tests]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH for cleanup
        run: |
          mkdir -p ~/.ssh
          case "${{ needs.prepare.outputs.ssh_key }}" in
            "SSH_PRIVATE_KEY_PRODUCTION")
              echo "${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_STAGING")
              echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_DEV"|*)
              echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" > ~/.ssh/id_rsa
              ;;
          esac
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.prepare.outputs.vm_host }} >> ~/.ssh/known_hosts

      - name: Cleanup old Docker images
        run: |
          echo "Cleaning up old Docker images"
          ssh -o StrictHostKeyChecking=no ubuntu@${{ needs.prepare.outputs.vm_host }} "
            docker images dreamscape/frontend --format 'table {{.Tag}} {{.ID}}' | grep -v latest | grep -v TAG | tail -n +6 | awk '{print \$2}' | xargs -r docker rmi || true
            docker images dreamscape/backend --format 'table {{.Tag}} {{.ID}}' | grep -v latest | grep -v TAG | tail -n +6 | awk '{print \$2}' | xargs -r docker rmi || true
            docker image prune -f
          "

  notify:
    if: always()
    needs: [prepare, deploy, post-deployment-tests, rollback, cleanup]
    runs-on: ubuntu-latest
    steps:
      - name: Set notification variables
        id: set-vars
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" && "${{ needs.post-deployment-tests.result }}" == "success" ]]; 
          then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "icon=success" >> $GITHUB_OUTPUT
            echo "title=DEPLOYMENT SUCCESSFUL" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.rollback.result }}" == "success" ]]; then
            echo "status=rollback" >> $GITHUB_OUTPUT
            echo "icon=rollback" >> $GITHUB_OUTPUT
            echo "title=DEPLOYMENT ROLLED BACK" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "icon=failure" >> $GITHUB_OUTPUT
            echo "title=DEPLOYMENT FAILED" >> $GITHUB_OUTPUT
          fi

      - name: Notify deployment status
        run: |
          echo "DREAMSCAPE DEPLOYMENT SUMMARY"
          echo "================================"
          echo "${{ steps.set-vars.outputs.title }}"
          echo ""
          echo "Details:"
          echo "  Environment: ${{ needs.prepare.outputs.environment }}"
          echo "  Services: ${{ needs.prepare.outputs.services }}"
          echo "  Image tag: ${{ needs.prepare.outputs.image_tag }}"
          echo "  Oracle VM: ${{ needs.prepare.outputs.vm_host }}"
          echo "  Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo ""
          echo "Pipeline Results:"
          echo "  - Pre-tests: ${{ needs.pre-deployment-tests.result }}"
          echo "  - Deploy: ${{ needs.deploy.result }}"
          echo "  - Post-tests: ${{ needs.post-deployment-tests.result }}"
          echo "  - Rollback: ${{ needs.rollback.result }}"
          echo "  - Cleanup: ${{ needs.cleanup.result }}"
          