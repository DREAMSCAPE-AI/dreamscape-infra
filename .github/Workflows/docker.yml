name: Docker Build & Push
on:
  repository_dispatch:
    types: 
      - build-frontend-image
      - build-backend-imageS
      - build-all-images
  workflow_dispatch:
    inputs:
      services:
        description: 'Services Ã  build (frontend,backend ou all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - frontend
          - backend

env:
  DOCKER_IMAGE_FRONT: dreamscape/frontend
  DOCKER_IMAGE_BACK: dreamscape/backend

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-services.outputs.services }}
      build_frontend: ${{ steps.set-services.outputs.build_frontend }}
      build_backend: ${{ steps.set-services.outputs.build_backend }}
      commit_sha: ${{ steps.set-tag.outputs.commit_sha }}
    steps:
      - name: Set services to build
        id: set-services
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            case "${{ github.event.action }}" in
              "build-frontend-image")
                services="frontend"
                ;;
              "build-backend-image") 
                services="backend"
                ;;
              "build-all-images"|*)
                services="all"
                ;;
            esac
          else
            services="${{ github.event.inputs.services }}"
          fi
          
          echo "services=$services" >> $GITHUB_OUTPUT
          
          if [[ "$services" == "all" || "$services" == "frontend" ]]; then
            echo "build_frontend=true" >> $GITHUB_OUTPUT
          else
            echo "build_frontend=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$services" == "all" || "$services" == "backend" ]]; then
            echo "build_backend=true" >> $GITHUB_OUTPUT
          else
            echo "build_backend=false" >> $GITHUB_OUTPUT
          fi

      - name: Set commit SHA
        id: set-tag
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            commit_sha="${{ github.event.client_payload.sha }}"
          else
            commit_sha="${{ github.sha }}"
          fi
          
          echo "commit_sha=${commit_sha:0:7}" >> $GITHUB_OUTPUT

  download-source:
    needs: [prepare]
    runs-on: ubuntu-latest
    steps:
      - name: Download frontend source
        if: needs.prepare.outputs.build_frontend == 'true'
        uses: actions/checkout@v4
        with:
          repository: DREAMSCAPE-AI/dreamscape-frontend
          token: ${{ secrets.CI_CLONE_TOKEN }}
          path: ./frontend

      - name: Download backend source  
        if: needs.prepare.outputs.build_backend == 'true'
        uses: actions/checkout@v4
        with:
          repository: DREAMSCAPE-AI/dreamscape-services
          token: ${{ secrets.CI_CLONE_TOKEN }}
          path: ./backend
      
      - name: Upload source code
        uses: actions/upload-artifact@v4
        with:
          name: source-code-${{ needs.prepare.outputs.commit_sha }}
          path: |
            frontend/
            backend/
          retention-days: 1

  build-frontend:
    needs: [prepare, download-source]
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.build_frontend == 'true'
    steps:
      - name: Download source code
        uses: actions/download-artifact@v4
        with:
          name: source-code-${{ needs.prepare.outputs.commit_sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_FRONT }}:${{ needs.prepare.outputs.commit_sha }}
            ${{ env.DOCKER_IMAGE_FRONT }}:latest

  build-backend:
    needs: [prepare, download-source]
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.build_backend == 'true'
    steps:
      - name: Download source code
        uses: actions/download-artifact@v4
        with:
          name: source-code-${{ needs.prepare.outputs.commit_sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_BACK }}:${{ needs.prepare.outputs.commit_sha }}
            ${{ env.DOCKER_IMAGE_BACK }}:latest

  trigger-deployment:
    needs: [prepare, build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success')
    steps:
      - name: Trigger deployment pipeline
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.CI_CLONE_TOKEN }}
          repository: DREAMSCAPE-AI/dreamscape-infra
          event-type: deploy-images
          client-payload: |
            {
              "services": "${{ needs.prepare.outputs.services }}",
              "commit_sha": "${{ needs.prepare.outputs.commit_sha }}",
              "triggered_by": "${{ github.event_name }}"
            }

  notify:
    if: always()
    needs: [prepare, build-frontend, build-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Notify build status
        run: |
          echo "Docker Build Results:"
          echo "Services: ${{ needs.prepare.outputs.services }}"
          echo "Commit SHA: ${{ needs.prepare.outputs.commit_sha }}"
          
          if [[ "${{ needs.build-frontend.result }}" == "success" || "${{ needs.build-backend.result }}" == "success" ]]; then
            echo "Images successfully built and pushed!"
          else
            echo "Build failed!"
          fi