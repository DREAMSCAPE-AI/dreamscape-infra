name: CD Pipeline - Deploy to Oracle Cloud
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment à déployer'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production
      services:
        description: 'Services à déployer'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - frontend
          - backend
      image_tag:
        description: 'Tag des images Docker'
        required: false
        default: 'latest'
        type: string

env:
  DOCKER_IMAGE_FRONT: dreamscape/frontend
  DOCKER_IMAGE_BACK: dreamscape/backend

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setup.outputs.environment }}
      services: ${{ steps.setup.outputs.services }}
      image_tag: ${{ steps.setup.outputs.image_tag }}
      vm_host: ${{ steps.setup.outputs.vm_host }}
      ssh_key: ${{ steps.setup.outputs.ssh_key }}
      deploy_frontend: ${{ steps.setup.outputs.deploy_frontend }}
      deploy_backend: ${{ steps.setup.outputs.deploy_backend }}
    steps:
      - name: Setup deployment parameters
        id: setup
        run: |
          # Environnement
          if [[ "${{ github.event_name }}" == "push" ]]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          fi
          
          # Services et tag
          SERVICES="${{ github.event.inputs.services || 'all' }}"
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "services=${SERVICES}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          
          # Configuration par environnement
          case ${ENVIRONMENT} in
            "production")
              echo "vm_host=${{ secrets.VM_HOST_PRODUCTION }}" >> $GITHUB_OUTPUT
              echo "ssh_key=SSH_PRIVATE_KEY_PRODUCTION" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "vm_host=${{ secrets.VM_HOST_STAGING }}" >> $GITHUB_OUTPUT
              echo "ssh_key=SSH_PRIVATE_KEY_STAGING" >> $GITHUB_OUTPUT
              ;;
            "dev"|*)
              echo "vm_host=${{ secrets.VM_HOST_DEV }}" >> $GITHUB_OUTPUT
              echo "ssh_key=SSH_PRIVATE_KEY_DEV" >> $GITHUB_OUTPUT
              ;;
          esac
          
          # Services à déployer
          if [[ "${SERVICES}" == "all" ]]; then
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
          elif [[ "${SERVICES}" == "frontend" ]]; then
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "deploy_backend=false" >> $GITHUB_OUTPUT
          elif [[ "${SERVICES}" == "backend" ]]; then
            echo "deploy_frontend=false" >> $GITHUB_OUTPUT
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: [prepare]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          
          VM_HOST="${{ needs.prepare.outputs.vm_host }}"
          if [ -z "$VM_HOST" ]; then
            echo "Error: VM host is empty for environment ${{ needs.prepare.outputs.environment }}"
            exit 1
          fi
          
          case "${{ needs.prepare.outputs.ssh_key }}" in
            "SSH_PRIVATE_KEY_PRODUCTION")
              echo "${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_STAGING")
              echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_DEV"|*)
              echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" > ~/.ssh/id_rsa
              ;;
          esac
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts

      - name: Make scripts executable
        run: |
          chmod +x scripts/deploy-frontend.sh
          chmod +x scripts/deploy-backend.sh
          chmod +x scripts/rollback.sh

      - name: Deploy Frontend
        if: needs.prepare.outputs.deploy_frontend == 'true'
        run: |
          ./scripts/deploy-frontend.sh \
            "${{ needs.prepare.outputs.environment }}" \
            "${{ needs.prepare.outputs.image_tag }}" \
            "${{ needs.prepare.outputs.vm_host }}"

      - name: Deploy Backend
        if: needs.prepare.outputs.deploy_backend == 'true'
        run: |
          ./scripts/deploy-backend.sh \
            "${{ needs.prepare.outputs.environment }}" \
            "${{ needs.prepare.outputs.image_tag }}" \
            "${{ needs.prepare.outputs.vm_host }}"

  summary:
    needs: [prepare, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "DEPLOYMENT SUMMARY"
          echo "=================="
          echo "Environment: ${{ needs.prepare.outputs.environment }}"
          echo "Services: ${{ needs.prepare.outputs.services }}"
          echo "Image tag: ${{ needs.prepare.outputs.image_tag }}"
          echo "Deploy result: ${{ needs.deploy.result }}"
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi