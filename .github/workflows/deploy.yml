name: CD Pipeline - Deploy to Oracle Cloud

on:
  push:
    branches: [main]
  repository_dispatch:
    types: [deploy-images]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment à déployer"
        required: true
        default: "staging"
        type: choice
        options:
          - dev
          - staging
          - production
      services:
        description: "Services à déployer"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - frontend
          - backend
      image_tag:
        description: "Tag des images Docker"
        required: false
        default: "latest"
        type: string

env:
  DOCKER_IMAGE_FRONT: dreamscape/frontend
  DOCKER_IMAGE_BACK: dreamscape/backend

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setup.outputs.environment }}
      services: ${{ steps.setup.outputs.services }}
      image_tag: ${{ steps.setup.outputs.image_tag }}
      deploy_frontend: ${{ steps.setup.outputs.deploy_frontend }}
      deploy_backend: ${{ steps.setup.outputs.deploy_backend }}
    steps:
      - name: Setup deployment parameters
        id: setup
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            ENVIRONMENT="staging"
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          fi

          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            SERVICES="${{ github.event.client_payload.services || 'all' }}"
          else
            SERVICES="${{ github.event.inputs.services || 'all' }}"
          fi

          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            IMAGE_TAG="${{ github.event.client_payload.commit_sha || 'latest' }}"
          else
            IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          fi

          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "services=${SERVICES}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

          if [[ "${SERVICES}" == "all" ]]; then
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
          elif [[ "${SERVICES}" == "frontend" ]]; then
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "deploy_backend=false" >> $GITHUB_OUTPUT
          elif [[ "${SERVICES}" == "backend" ]]; then
            echo "deploy_frontend=false" >> $GITHUB_OUTPUT
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: [prepare]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create SSH keys from secrets
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}"       | tr -d '\r' > cle_dev.key
          echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}"   | tr -d '\r' > cle_staging.key
          echo "${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}"| tr -d '\r' > cle_prod.key
          chmod 600 cle_*.key
          ls -l cle_*.key

      - name: Select VM host and SSH key file
        env:
          VM_HOST_PRODUCTION: ${{ secrets.VM_HOST_PRODUCTION }}
          VM_HOST_STAGING: ${{ secrets.VM_HOST_STAGING }}
          VM_HOST_DEV: ${{ secrets.VM_HOST_DEV }}
        run: |
          case "${{ needs.prepare.outputs.environment }}" in
            "production")
              VM_HOST="$VM_HOST_PRODUCTION"
              SSH_KEY_FILE="cle_prod.key"
              ;;
            "staging")
              VM_HOST="$VM_HOST_STAGING"
              SSH_KEY_FILE="cle_staging.key"
              ;;
            "dev"|*)
              VM_HOST="$VM_HOST_DEV"
              SSH_KEY_FILE="cle_dev.key"
              ;;
          esac

          if [ -z "$VM_HOST" ]; then
            echo "❌ Error: VM host is empty for environment $ENV"
            exit 1
          fi

          echo "VM_HOST=$VM_HOST" >> $GITHUB_ENV
          echo "SSH_KEY_FILE=$SSH_KEY_FILE" >> $GITHUB_ENV
          echo "✅ Using host: $VM_HOST with key: $SSH_KEY_FILE"

      - name: Setup SSH key and known_hosts
        run: |
          case "${{ needs.prepare.outputs.environment }}" in
            "production")
              SSH_KEY_FILE="cle_prod.key"
              VM_HOST="${{ secrets.VM_HOST_PRODUCTION }}"
              ;;
            "staging")
              SSH_KEY_FILE="cle_staging.key"
              VM_HOST="${{ secrets.VM_HOST_STAGING }}"
              ;;
            "dev"|*)
              SSH_KEY_FILE="cle_dev.key"
              VM_HOST="${{ secrets.VM_HOST_DEV }}"
              ;;
          esac

          echo "✅ Using host: $VM_HOST with key: $SSH_KEY_FILE"

          echo "VM_HOST=$VM_HOST" >> $GITHUB_ENV
          echo "SSH_KEY_FILE=$SSH_KEY_FILE" >> $GITHUB_ENV

          # FIX: créer ~/.ssh avant le keyscan
          mkdir -p ~/.ssh
          ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts

      - name: Make scripts executable
        run: |
          chmod +x scripts/deploy-frontend.sh
          chmod +x scripts/deploy-backend.sh
          chmod +x scripts/rollback.sh

      - name: Deploy Frontend
        if: needs.prepare.outputs.deploy_frontend == 'true'
        run: |
          ./scripts/deploy-frontend.sh \
            "${{ needs.prepare.outputs.environment }}" \
            "${{ needs.prepare.outputs.image_tag }}" \
            "$VM_HOST" \
            "$SSH_KEY_FILE"

      - name: Deploy Backend
        if: needs.prepare.outputs.deploy_backend == 'true'
        run: |
          ./scripts/deploy-backend.sh \
            "${{ needs.prepare.outputs.environment }}" \
            "${{ needs.prepare.outputs.image_tag }}" \
            "$VM_HOST" \
            "$SSH_KEY_FILE"

  rollback:
    needs: [prepare, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Select SSH key file for rollback
        env:
          VM_HOST_PRODUCTION: ${{ secrets.VM_HOST_PRODUCTION }}
          VM_HOST_STAGING: ${{ secrets.VM_HOST_STAGING }}
          VM_HOST_DEV: ${{ secrets.VM_HOST_DEV }}
        run: |
          case "${{ needs.prepare.outputs.environment }}" in
            "production")
              VM_HOST="$VM_HOST_PRODUCTION"
              SSH_KEY_FILE="cle_prod.key"
              ;;
            "staging")
              VM_HOST="$VM_HOST_STAGING"
              SSH_KEY_FILE="cle_staging.key"
              ;;
            "dev"|*)
              VM_HOST="$VM_HOST_DEV"
              SSH_KEY_FILE="cle_dev.key"
              ;;
          esac

          echo "VM_HOST=$VM_HOST" >> $GITHUB_ENV
          echo "SSH_KEY_FILE=$SSH_KEY_FILE" >> $GITHUB_ENV
          ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts

      - name: Execute rollback
        run: |
          chmod +x scripts/rollback.sh
          ./scripts/rollback.sh \
            "${{ needs.prepare.outputs.environment }}" \
            "${{ needs.prepare.outputs.services }}" \
            "$VM_HOST" \
            "$SSH_KEY_FILE"

  summary:
    needs: [prepare, deploy, rollback]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "DEPLOYMENT SUMMARY"
          echo "=================="
          echo "Environment: ${{ needs.prepare.outputs.environment }}"
          echo "Services: ${{ needs.prepare.outputs.services }}"
          echo "Image tag: ${{ needs.prepare.outputs.image_tag }}"
          echo ""
          echo "Results:"
          echo "- Deploy: ${{ needs.deploy.result }}"
          echo "- Rollback: ${{ needs.rollback.result }}"

          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Deployment successful!"
          elif [[ "${{ needs.rollback.result }}" == "success" ]]; then
            echo "⚠️ Deployment failed but rollback successful"
          else
            echo "❌ Deployment failed"
          fi
