name: CI/CD Pipeline - Build & Deploy to Oracle Cloud
on:
  push:
    branches: [main]
  repository_dispatch:
    types: [deploy-images]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment √† d√©ployer'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production
      services:
        description: 'Services √† traiter'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - frontend
          - backend
      image_tag:
        description: 'Tag des images Docker (si skip build)'
        required: false
        type: string
      skip_build:
        description: 'Skip le build et utiliser des images existantes'
        required: false
        default: false
        type: boolean

env:
  DOCKER_IMAGE_FRONT: dreamscape/frontend
  DOCKER_IMAGE_BACK: dreamscape/backend

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setup.outputs.environment }}
      services: ${{ steps.setup.outputs.services }}
      image_tag: ${{ steps.setup.outputs.image_tag }}
      vm_host: ${{ steps.setup.outputs.vm_host }}
      ssh_key: ${{ steps.setup.outputs.ssh_key }}
      deploy_frontend: ${{ steps.setup.outputs.deploy_frontend }}
      deploy_backend: ${{ steps.setup.outputs.deploy_backend }}
      build_frontend: ${{ steps.setup.outputs.build_frontend }}
      build_backend: ${{ steps.setup.outputs.build_backend }}
      skip_build: ${{ steps.setup.outputs.skip_build }}
    steps:
      - name: Setup parameters
        id: setup
        run: |
          # Environnement
          if [[ "${{ github.event_name }}" == "push" ]]; then
            ENVIRONMENT="staging"
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          fi
          
          # Services
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            SERVICES="${{ github.event.client_payload.services || 'all' }}"
          else
            SERVICES="${{ github.event.inputs.services || 'all' }}"
          fi
          
          # Skip build
          SKIP_BUILD="${{ github.event.inputs.skip_build || 'false' }}"
          
          # Tag des images
          if [[ "$SKIP_BUILD" == "true" ]]; then
            IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          else
            IMAGE_TAG="${{ github.sha }}"
            IMAGE_TAG="${IMAGE_TAG:0:7}"
          fi
          
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "services=${SERVICES}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "skip_build=${SKIP_BUILD}" >> $GITHUB_OUTPUT
          
          # Configuration par environnement
          case ${ENVIRONMENT} in
            "production")
              echo "vm_host=${{ secrets.VM_HOST_PRODUCTION }}" >> $GITHUB_OUTPUT
              echo "ssh_key=SSH_PRIVATE_KEY_PRODUCTION" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "vm_host=${{ secrets.VM_HOST_STAGING }}" >> $GITHUB_OUTPUT
              echo "ssh_key=SSH_PRIVATE_KEY_STAGING" >> $GITHUB_OUTPUT
              ;;
            "dev"|*)
              echo "vm_host=${{ secrets.VM_HOST_DEV }}" >> $GITHUB_OUTPUT
              echo "ssh_key=SSH_PRIVATE_KEY_DEV" >> $GITHUB_OUTPUT
              ;;
          esac
          
          # Services √† traiter
          if [[ "${SERVICES}" == "all" ]]; then
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
            echo "build_frontend=true" >> $GITHUB_OUTPUT
            echo "build_backend=true" >> $GITHUB_OUTPUT
          elif [[ "${SERVICES}" == "frontend" ]]; then
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "deploy_backend=false" >> $GITHUB_OUTPUT
            echo "build_frontend=true" >> $GITHUB_OUTPUT
            echo "build_backend=false" >> $GITHUB_OUTPUT
          elif [[ "${SERVICES}" == "backend" ]]; then
            echo "deploy_frontend=false" >> $GITHUB_OUTPUT
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
            echo "build_frontend=false" >> $GITHUB_OUTPUT
            echo "build_backend=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: [prepare]
    if: needs.prepare.outputs.skip_build == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Download frontend source
        if: needs.prepare.outputs.build_frontend == 'true'
        uses: actions/checkout@v4
        with:
          repository: DREAMSCAPE-AI/dreamscape-frontend
          token: ${{ secrets.CI_CLONE_TOKEN }}
          path: ./frontend

      - name: Download backend source
        if: needs.prepare.outputs.build_backend == 'true'
        uses: actions/checkout@v4
        with:
          repository: DREAMSCAPE-AI/dreamscape-services
          token: ${{ secrets.CI_CLONE_TOKEN }}
          path: ./backend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Frontend
        if: needs.prepare.outputs.build_frontend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_FRONT }}:${{ needs.prepare.outputs.image_tag }}
            ${{ env.DOCKER_IMAGE_FRONT }}:latest

      - name: Build and Push Backend
        if: needs.prepare.outputs.build_backend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_BACK }}:${{ needs.prepare.outputs.image_tag }}
            ${{ env.DOCKER_IMAGE_BACK }}:latest

  deploy:
    needs: [prepare, build]
    if: always() && (needs.build.result == 'success' || needs.prepare.outputs.skip_build == 'true')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          case "${{ needs.prepare.outputs.ssh_key }}" in
            "SSH_PRIVATE_KEY_PRODUCTION")
              echo "${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_STAGING")
              echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_DEV"|*)
              echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" > ~/.ssh/id_rsa
              ;;
          esac
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.prepare.outputs.vm_host }} >> ~/.ssh/known_hosts

      - name: Make scripts executable
        run: |
          chmod +x scripts/deploy-frontend.sh
          chmod +x scripts/deploy-backend.sh
          chmod +x scripts/rollback.sh

      - name: Deploy Frontend
        if: needs.prepare.outputs.deploy_frontend == 'true'
        run: |
          ./scripts/deploy-frontend.sh \
            "${{ needs.prepare.outputs.environment }}" \
            "${{ needs.prepare.outputs.image_tag }}" \
            "${{ needs.prepare.outputs.vm_host }}"

      - name: Deploy Backend
        if: needs.prepare.outputs.deploy_backend == 'true'
        run: |
          ./scripts/deploy-backend.sh \
            "${{ needs.prepare.outputs.environment }}" \
            "${{ needs.prepare.outputs.image_tag }}" \
            "${{ needs.prepare.outputs.vm_host }}"

  rollback:
    needs: [prepare, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH for rollback
        run: |
          mkdir -p ~/.ssh
          case "${{ needs.prepare.outputs.ssh_key }}" in
            "SSH_PRIVATE_KEY_PRODUCTION")
              echo "${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_STAGING")
              echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ~/.ssh/id_rsa
              ;;
            "SSH_PRIVATE_KEY_DEV"|*)
              echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" > ~/.ssh/id_rsa
              ;;
          esac
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.prepare.outputs.vm_host }} >> ~/.ssh/known_hosts

      - name: Execute rollback
        run: |
          chmod +x scripts/rollback.sh
          ./scripts/rollback.sh \
            "${{ needs.prepare.outputs.environment }}" \
            "${{ needs.prepare.outputs.services }}" \
            "${{ needs.prepare.outputs.vm_host }}"

  summary:
    needs: [prepare, build, deploy, rollback]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Pipeline Summary
        run: |
          echo "CI/CD PIPELINE SUMMARY"
          echo "======================"
          echo "Environment: ${{ needs.prepare.outputs.environment }}"
          echo "Services: ${{ needs.prepare.outputs.services }}"
          echo "Image tag: ${{ needs.prepare.outputs.image_tag }}"
          echo "Skip build: ${{ needs.prepare.outputs.skip_build }}"
          echo ""
          echo "Results:"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Deploy: ${{ needs.deploy.result }}"
          echo "- Rollback: ${{ needs.rollback.result }}"
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Pipeline successful!"
          elif [[ "${{ needs.rollback.result }}" == "success" ]]; then
            echo "üîÑ Deployment failed but rollback successful"
          else
            echo "‚ùå Pipeline failed"
          fi
