name: Simple Deploy Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        default: "staging"
        type: choice
        options:
          - dev
          - staging
          - production
      service:
        description: "Service"
        required: true
        default: "frontend"
        type: choice
        options:
          - frontend
          - backend
          - both
      image_tag:
        description: "Image tag"
        required: false
        default: "latest"
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          # D√©terminer l'environnement
          if [ "${{ github.event_name }}" = "push" ]; then
            ENV="staging"
          else
            ENV="${{ github.event.inputs.environment }}"
          fi
          
          # D√©terminer le service
          if [ "${{ github.event_name }}" = "push" ]; then
            SERVICE="both"
          else
            SERVICE="${{ github.event.inputs.service }}"
          fi
          
          # D√©terminer le tag
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          
          echo "ENVIRONMENT=${ENV}" >> $GITHUB_ENV
          echo "SERVICE=${SERVICE}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          
          # D√©terminer l'host et la cl√© selon l'environnement
          case "${ENV}" in
            "production")
              echo "VM_HOST=${{ secrets.VM_HOST_PRODUCTION }}" >> $GITHUB_ENV
              echo "SSH_KEY_SECRET=SSH_PRIVATE_KEY_PRODUCTION" >> $GITHUB_ENV
              ;;
            "staging")
              echo "VM_HOST=${{ secrets.VM_HOST_STAGING }}" >> $GITHUB_ENV
              echo "SSH_KEY_SECRET=SSH_PRIVATE_KEY_STAGING" >> $GITHUB_ENV
              ;;
            "dev")
              echo "VM_HOST=${{ secrets.VM_HOST_DEV }}" >> $GITHUB_ENV
              echo "SSH_KEY_SECRET=SSH_PRIVATE_KEY_DEV" >> $GITHUB_ENV
              ;;
          esac
          
          echo "‚úÖ Configuration:"
          echo "  Environment: ${ENV}"
          echo "  Service: ${SERVICE}" 
          echo "  Image Tag: ${IMAGE_TAG}"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Cr√©er la cl√© SSH selon l'environnement
          case "$ENVIRONMENT" in
            "production")
              echo "${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}" > ssh_key
              ;;
            "staging") 
              echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ssh_key
              ;;
            "dev")
              echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" > ssh_key
              ;;
          esac
          
          chmod 600 ssh_key
          
          # Ajouter l'host aux known_hosts
          ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts 2>/dev/null
          
          echo "‚úÖ SSH configur√© pour $VM_HOST"

      - name: Deploy Frontend
        if: env.SERVICE == 'frontend' || env.SERVICE == 'both'
        run: |
          echo "üöÄ D√©ploiement Frontend sur $ENVIRONMENT"
          
          ssh -i ssh_key -o StrictHostKeyChecking=no ubuntu@$VM_HOST << 'EOF'
            # Arr√™ter le conteneur existant
            docker stop dreamscape-frontend-${{ env.ENVIRONMENT }} 2>/dev/null || true
            docker rm dreamscape-frontend-${{ env.ENVIRONMENT }} 2>/dev/null || true
            
            # Tirer la nouvelle image
            docker pull dreamscape/frontend:${{ env.IMAGE_TAG }}
            
            # D√©marrer le nouveau conteneur
            docker run -d \
              --name dreamscape-frontend-${{ env.ENVIRONMENT }} \
              --restart unless-stopped \
              -p 80:80 \
              -e NODE_ENV=${{ env.ENVIRONMENT }} \
              dreamscape/frontend:${{ env.IMAGE_TAG }}
            
            # V√©rifier que le conteneur tourne
            sleep 10
            if docker ps | grep dreamscape-frontend-${{ env.ENVIRONMENT }}; then
              echo "‚úÖ Frontend d√©ploy√© avec succ√®s"
            else
              echo "‚ùå √âchec du d√©ploiement frontend"
              exit 1
            fi
          EOF

      - name: Deploy Backend
        if: env.SERVICE == 'backend' || env.SERVICE == 'both'
        run: |
          echo "üöÄ D√©ploiement Backend sur $ENVIRONMENT"
          
          ssh -i ssh_key -o StrictHostKeyChecking=no ubuntu@$VM_HOST << 'EOF'
            # Arr√™ter le conteneur existant
            docker stop dreamscape-backend-${{ env.ENVIRONMENT }} 2>/dev/null || true
            docker rm dreamscape-backend-${{ env.ENVIRONMENT }} 2>/dev/null || true
            
            # Tirer la nouvelle image
            docker pull dreamscape/backend:${{ env.IMAGE_TAG }}
            
            # D√©marrer le nouveau conteneur
            docker run -d \
              --name dreamscape-backend-${{ env.ENVIRONMENT }} \
              --restart unless-stopped \
              -p 8080:8080 \
              -e NODE_ENV=${{ env.ENVIRONMENT }} \
              dreamscape/backend:${{ env.IMAGE_TAG }}
            
            # V√©rifier que le conteneur tourne
            sleep 10
            if docker ps | grep dreamscape-backend-${{ env.ENVIRONMENT }}; then
              echo "‚úÖ Backend d√©ploy√© avec succ√®s"
            else
              echo "‚ùå √âchec du d√©ploiement backend"
              exit 1
            fi
          EOF

      - name: Health Check
        run: |
          echo "üîç V√©rification de sant√©..."
          
          if [ "$SERVICE" = "frontend" ] || [ "$SERVICE" = "both" ]; then
            ssh -i ssh_key -o StrictHostKeyChecking=no ubuntu@$VM_HOST << 'EOF'
              for i in {1..5}; do
                if curl -f -s http://localhost/ > /dev/null; then
                  echo "‚úÖ Frontend OK"
                  break
                else
                  echo "‚è≥ Tentative $i/5 pour frontend..."
                  sleep 5
                fi
              done
          EOF
          fi
          
          if [ "$SERVICE" = "backend" ] || [ "$SERVICE" = "both" ]; then
            ssh -i ssh_key -o StrictHostKeyChecking=no ubuntu@$VM_HOST << 'EOF'
              for i in {1..5}; do
                if curl -f -s http://localhost:8080/health > /dev/null 2>&1; then
                  echo "‚úÖ Backend OK"
                  break
                else
                  echo "‚è≥ Tentative $i/5 pour backend..."
                  sleep 5
                fi
              done
          EOF
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -f ssh_key
          echo "‚úÖ Nettoyage termin√©"

  rollback:
    if: failure()
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Rollback (manual for now)
        run: |
          echo "‚ùå D√©ploiement √©chou√©"
          echo "üîÑ Pour un rollback manuel, connectez-vous au serveur et ex√©cutez:"
          echo "docker stop dreamscape-[service]-${{ github.event.inputs.environment || 'staging' }}"
          echo "docker run -d --name dreamscape-[service]-${{ github.event.inputs.environment || 'staging' }} [previous-image]"