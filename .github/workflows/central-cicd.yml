name: 🚀 Central CI/CD Pipeline

on:
  repository_dispatch:
    types: [services-changed, frontend-changed, tests-changed, docs-changed]
  workflow_dispatch:
    inputs:
      event_type:
        description: 'Event type to simulate'
        required: true
        default: 'services-changed'
        type: choice
        options:
          - services-changed
          - frontend-changed
          - tests-changed
          - docs-changed
      component:
        description: 'Component(s) changed'
        required: true
        default: 'all'
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

permissions:
  contents: read
  statuses: write
  actions: read

env:
  ENVIRONMENT: ${{ github.event.client_payload.environment || inputs.environment || 'dev' }}
  COMPONENT: ${{ github.event.client_payload.component || inputs.component || 'all' }}
  SOURCE_REPO: ${{ github.event.client_payload.source_repo || 'manual' }}
  SOURCE_SHA: ${{ github.event.client_payload.sha || github.sha }}
  TRIGGER_TYPE: ${{ github.event.client_payload.trigger_type || 'manual' }}

jobs:
  parse-event:
    name: Parse Dispatch Event
    runs-on: ubuntu-latest
    outputs:
      event_type: ${{ steps.parse.outputs.event_type }}
      component: ${{ steps.parse.outputs.component }}
      environment: ${{ steps.parse.outputs.environment }}
      source_repo: ${{ steps.parse.outputs.source_repo }}
      source_sha: ${{ steps.parse.outputs.source_sha }}
      should_deploy: ${{ steps.parse.outputs.should_deploy }}
      strategy: ${{ steps.parse.outputs.strategy }}
    steps:
      - name: Parse event payload
        id: parse
        run: |
          echo "🔍 Parsing dispatch event..."
          
          # Event type
          EVENT_TYPE="${{ github.event.action || inputs.event_type }}"
          echo "event_type=${EVENT_TYPE}" >> $GITHUB_OUTPUT
          
          # Component and environment
          echo "component=${COMPONENT}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "source_repo=${SOURCE_REPO}" >> $GITHUB_OUTPUT
          echo "source_sha=${SOURCE_SHA}" >> $GITHUB_OUTPUT
          
          # Determine deployment strategy based on event type and environment
          SHOULD_DEPLOY="false"
          STRATEGY="validate"
          
          case "${EVENT_TYPE}" in
            "services-changed")
              if [[ "${ENVIRONMENT}" == "production" ]]; then
                SHOULD_DEPLOY="true"
                STRATEGY="blue-green"
              elif [[ "${ENVIRONMENT}" == "staging" ]]; then
                SHOULD_DEPLOY="true"
                STRATEGY="rolling"
              else
                STRATEGY="validate"
              fi
              ;;
            "frontend-changed")
              if [[ "${ENVIRONMENT}" != "dev" ]]; then
                SHOULD_DEPLOY="true"
                STRATEGY="rolling"
              fi
              ;;
            "tests-changed")
              STRATEGY="test-only"
              ;;
            "docs-changed")
              if [[ "${{ github.event.client_payload.deployment_impact }}" == "true" ]]; then
                SHOULD_DEPLOY="true"
                STRATEGY="docs-deploy"
              fi
              ;;
          esac
          
          echo "should_deploy=${SHOULD_DEPLOY}" >> $GITHUB_OUTPUT
          echo "strategy=${STRATEGY}" >> $GITHUB_OUTPUT
          
          echo "📊 Event Summary:"
          echo "- Event Type: ${EVENT_TYPE}"
          echo "- Component: ${COMPONENT}"
          echo "- Environment: ${ENVIRONMENT}"
          echo "- Source: ${SOURCE_REPO}"
          echo "- Should Deploy: ${SHOULD_DEPLOY}"
          echo "- Strategy: ${STRATEGY}"

  update-source-status:
    name: Update Source Status
    runs-on: ubuntu-latest
    needs: [parse-event]
    if: needs.parse-event.outputs.source_repo != 'manual'
    steps:
      - name: Update commit status to running
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const [owner, repo] = "${{ needs.parse-event.outputs.source_repo }}".split('/');
            const sha = "${{ needs.parse-event.outputs.source_sha }}";
            
            console.log(`Updating status for ${owner}/${repo}@${sha}`);
            
            await github.rest.repos.createCommitStatus({
              owner: owner,
              repo: repo,
              sha: sha,
              state: 'pending',
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'Central CI/CD pipeline running',
              context: 'ci/central-pipeline'
            });

  validate-changes:
    name: Validate Changes
    runs-on: ubuntu-latest
    needs: [parse-event, update-source-status]
    if: always() && needs.parse-event.outputs.strategy != 'test-only'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate component changes
        run: |
          echo "🔍 Validating changes for ${{ needs.parse-event.outputs.component }}..."
          
          case "${{ needs.parse-event.outputs.event_type }}" in
            "services-changed")
              echo "Validating backend services..."
              echo "✅ Service validation passed"
              ;;
            "frontend-changed")
              echo "Validating frontend components..."
              echo "✅ Frontend validation passed"
              ;;
            "docs-changed")
              echo "Validating documentation..."
              echo "✅ Documentation validation passed"
              ;;
            *)
              echo "✅ Generic validation passed"
              ;;
          esac

  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [parse-event, validate-changes]
    if: always() && (needs.parse-event.outputs.strategy == 'test-only' || needs.parse-event.outputs.environment != 'production')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run test suite
        run: |
          echo "🧪 Running tests for ${{ needs.parse-event.outputs.component }}..."
          
          case "${{ needs.parse-event.outputs.event_type }}" in
            "services-changed")
              echo "Running backend service tests..."
              echo "✅ Backend tests passed"
              ;;
            "frontend-changed")
              echo "Running frontend tests..."
              echo "✅ Frontend tests passed"
              ;;
            "tests-changed")
              echo "Running ${{ needs.parse-event.outputs.component }} test suite..."
              echo "✅ Test suite validation passed"
              ;;
            *)
              echo "✅ Tests passed"
              ;;
          esac

  deploy:
    name: Deploy to ${{ needs.parse-event.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [parse-event, validate-changes, run-tests]
    if: always() && needs.parse-event.outputs.should_deploy == 'true' && (needs.validate-changes.result == 'success' || needs.validate-changes.result == 'skipped') && (needs.run-tests.result == 'success' || needs.run-tests.result == 'skipped')
    environment: ${{ needs.parse-event.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy with strategy ${{ needs.parse-event.outputs.strategy }}
        run: |
          echo "🚀 Deploying to ${{ needs.parse-event.outputs.environment }} using ${{ needs.parse-event.outputs.strategy }} strategy..."
          
          case "${{ needs.parse-event.outputs.strategy }}" in
            "blue-green")
              echo "Executing blue-green deployment..."
              ;;
            "rolling")
              echo "Executing rolling deployment..."
              ;;
            "docs-deploy")
              echo "Deploying documentation..."
              ;;
            *)
              echo "Executing standard deployment..."
              ;;
          esac
          
          echo "✅ Deployment completed successfully"

  finalize-status:
    name: Finalize Status
    runs-on: ubuntu-latest
    needs: [parse-event, update-source-status, validate-changes, run-tests, deploy]
    if: always() && needs.parse-event.outputs.source_repo != 'manual'
    steps:
      - name: Determine final status
        id: status
        run: |
          # Determine overall success
          OVERALL_STATUS="success"
          DESCRIPTION="Central CI/CD pipeline completed successfully"
          
          # Check critical job results
          if [[ "${{ needs.validate-changes.result }}" == "failure" ]]; then
            OVERALL_STATUS="failure"
            DESCRIPTION="Validation failed"
          elif [[ "${{ needs.run-tests.result }}" == "failure" ]]; then
            OVERALL_STATUS="failure"
            DESCRIPTION="Tests failed"
          elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            OVERALL_STATUS="failure"
            DESCRIPTION="Deployment failed"
          elif [[ "${{ needs.parse-event.outputs.should_deploy }}" == "true" && "${{ needs.deploy.result }}" == "skipped" ]]; then
            OVERALL_STATUS="failure"
            DESCRIPTION="Deployment was skipped unexpectedly"
          fi
          
          echo "status=${OVERALL_STATUS}" >> $GITHUB_OUTPUT
          echo "description=${DESCRIPTION}" >> $GITHUB_OUTPUT
          
          echo "Final Status: ${OVERALL_STATUS}"
          echo "Description: ${DESCRIPTION}"

      - name: Update final commit status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const [owner, repo] = "${{ needs.parse-event.outputs.source_repo }}".split('/');
            const sha = "${{ needs.parse-event.outputs.source_sha }}";
            const status = "${{ steps.status.outputs.status }}";
            const description = "${{ steps.status.outputs.description }}";
            
            console.log(`Final status update for ${owner}/${repo}@${sha}: ${status}`);
            
            await github.rest.repos.createCommitStatus({
              owner: owner,
              repo: repo,
              sha: sha,
              state: status,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'ci/central-pipeline'
            });

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [parse-event, validate-changes, run-tests, deploy, finalize-status]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "🚀 CENTRAL CI/CD PIPELINE SUMMARY"
          echo "================================="
          echo "Event Type: ${{ needs.parse-event.outputs.event_type }}"
          echo "Component: ${{ needs.parse-event.outputs.component }}"
          echo "Environment: ${{ needs.parse-event.outputs.environment }}"
          echo "Source: ${{ needs.parse-event.outputs.source_repo }}"
          echo "Strategy: ${{ needs.parse-event.outputs.strategy }}"
          echo ""
          echo "Job Results:"
          echo "- Parse Event: ${{ needs.parse-event.result }}"
          echo "- Validate Changes: ${{ needs.validate-changes.result }}"
          echo "- Run Tests: ${{ needs.run-tests.result }}"
          echo "- Deploy: ${{ needs.deploy.result }}"
          echo "- Finalize Status: ${{ needs.finalize-status.result }}"
          echo ""
          if [[ "${{ needs.parse-event.outputs.should_deploy }}" == "true" ]]; then
            echo "✅ Deployment completed to ${{ needs.parse-event.outputs.environment }}"
          else
            echo "ℹ️ No deployment required for this change"
          fi